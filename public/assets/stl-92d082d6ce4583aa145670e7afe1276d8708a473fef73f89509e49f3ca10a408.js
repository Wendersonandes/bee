var loadStl=function(){var r=function(r,e){var t=new THREE.Vector3;return t.x=r.getFloat32(e+0,!0),t.y=r.getFloat32(e+4,!0),t.z=r.getFloat32(e+8,!0),t},e=function(e){for(var t=new DataView(e),s=t.getUint32(80,!0),n=new THREE.Geometry,o=84,a=0;a<s;a++){var u=r(t,o);n.vertices.push(r(t,o+12)),n.vertices.push(r(t,o+24)),n.vertices.push(r(t,o+36)),n.faces.push(new THREE.Face3(3*a,3*a+1,3*a+2,u)),o+=50}return n},t=function(r){var e=new THREE.Vector3;return e.x=parseFloat(r[1]),e.y=parseFloat(r[2]),e.z=parseFloat(r[3]),e},s=function(r){for(var e=[],t=0,s=0;s<r.length;s++)if(10===r[s]){var n=String.fromCharCode.apply(null,r.subarray(t,s));e.push(n),t=s+1}return e.push(String.fromCharCode.apply(null,r.subarray(t))),e},n=function(r){var e=s(new Uint8Array(r)),n=0,o=function(r){for(;e[n].match(/^\s*$/);)n++;return e[n].match(r)},a=function(r){var t=o(r);if(!t)throw new Error("not text stl: "+r.toString()+"=> (line "+(n-1)+")["+e[n-1]+"]");return n++,t},u=/^\s*facet\s+normal\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)/,l=/^\s*vertex\s+([^s]+)\s+([^\s]+)\s+([^\s]+)/,c=new THREE.Geometry;for(a(/^\s*solid\s(.*)/);!o(/^\s*endsolid/);){var i=a(u);a(/^\s*outer\s+loop/);var f=a(l),v=a(l),p=a(l);a(/\s*endloop/),a(/\s*endfacet/);var h=c.vertices.length;c.vertices.push(t(f)),c.vertices.push(t(v)),c.vertices.push(t(p)),c.faces.push(new THREE.Face3(h,h+1,h+2,t(i)))}return c};return function(r){try{return console.log("load as text stl"),n(r)}catch(t){return console.log(t),console.log("load as binary stl"),e(r)}}}();